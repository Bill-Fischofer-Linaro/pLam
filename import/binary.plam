-------------------------------------------
--            BINARY LIBRARY             --
--=======================================--

-- TODO:
---- features   : negative numerals
---- operations : div, mod
---- fixes      : mul


---------------- BOOLEANS -----------------
T = \x y. x
F = \x y. y
not = \x. x F T
and = \x y. x y F
or = \x y. x T y
or3 = \x y z. or (or x y) z
xor = \x y. x (not y) y
xor3 = \x y z. xor (xor x y) z
-------------------------------------------

-- pair operations
pair = \x y p. p x y
fst = \p. p T
snd = \p. p F

-- this represents the end of the list
end = \e. T
isEnd = \p. p (\x y. F)

-- Y combinator
Y = \f. (\x. f(x x)) (\x. f(x x))


--------------------
--    ADDITION    --
--================--
carryA = \x y c. or (and x y) (and (or x y) c)

-- equal size addition
addB0e = Y (\f. \x y c. (isEnd x) (c (pair T end) end) (pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryA (fst x) (fst y) c))))
addBe = \x y. addB0e x y F

-- variant size addition
forkA = \x y c. (and (isEnd x) (isEnd y)) (c (pair T end) end) ((isEnd x) (pair (xor3 F (fst y) c) (f end (snd y) (carryA F (fst y) c))) ((isEnd y) (pair (xor3 (fst x) F c) (f (snd x) end (carryA (fst x) F c))) (pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryA (fst x) (fst y) c)))))

-- E = c (pair T end) end
-- M = pair (xor3 F (fst y) c) (f end (snd y) (carryA F (fst y) c))
-- N = pair (xor3 (fst x) F c) (f (snd x) end (carryA (fst x) F c))
-- L = pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryA (fst x) (fst y) c))

addB0 = Y (\f. forkA)
addB = \x y. addB0 x y F
-------------------------------------------------

------------------------
--    SUBSTRACTION    --
--====================--
carryS = \x y c. or (and (not x) y) (and (not (or x y)) c)

-- equal size substraction
subB0e = Y (\f. \x y c. (isEnd x) end (pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryS (fst x) (fst y) c))))
subBe = \x y. subB0e x y F

-- variant substraction
forkS = \x y A B C. (and (isEnd x) (isEnd y)) end ((isEnd x) A ((isEnd y) B C))
subB0 = Y (\f. \x y c. forkS x y (pair (xor3 F (fst y) c) (f end (snd y) (carryS F (fst y) c))) (pair (xor3 (fst x) F c) (f (snd x) end (carryS (fst x) F c))) (pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryS (fst x) (fst y) c))))
subB = \x y. subB0 x y F
----------------------------------------------

--------------------
--    ADEQUACY    --
--================--
-- test for zero
isZeroB0 = Y (\f. \x b. (isEnd x) b (or (fst x) (f (snd x) b)))
isZeroB = \x. not (isZeroB0 x F)

-- successor
SB = \x. addB x (pair T end)

-- predecessor
PB = \x. subB x (pair T end)
---------------------------------------------

-- multiplication
mulb = Y (\f. \x b. (isEnd x) end (pair (and (fst x) b) (f (snd x) b)))
shiftr = \x. pair F x
mulB0 = Y (\f. \x y s. (isEnd y) s (f x (snd y) (shiftr (addB s (mulb x (fst y))))))
mulB = \x y. mulB0 x y :b0

-- primitive recursion, version 0
PR0 = \G H. (Y (\f k. (isZeroB k) G (H k (f (PB k)))))


